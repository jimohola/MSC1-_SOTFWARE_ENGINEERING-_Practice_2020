// ZooAnimal #1 (1):
class ZooAnimal
   {
    private:
      char *name;
      int cageNumber;
      int weightDate;
      int weight;
    public:
      ZooAnimal(char *, int, int, int); // Create Function (Constructor)
      void Destroy (); // destroy function
      char* reptName ();
      int daysSinceLastWeighed (int today);
   };

*******************************************************************************************

// ZooAnimal #1 (2):
class ZooAnimal
   {
    private:
      char *name;
      int cageNumber;
      int weightDate;
      int weight;
    public:
      ZooAnimal(char *, int, int, int); // Create Function (Constructor)
      void Destroy (); // destroy function
      char* reptName ();
      int daysSinceLastWeighed (int today);
   };
void ZooAnimal::Destroy ()
   {
    delete [] name;
   }
   // -------- member function to return the animal's name
   char* ZooAnimal::reptName ()
   {
    return name;
   }

   // -------- member function to return the number of days
   // -------- since the animal was last weigh ed
int ZooAnimal::daysSinceLastWeighed(int today)
   {
    int startday, thisday;
    thisday = today/100*30 + today - today/100*100;
    startday = weightDate/100*30 + weightDate - weightDate/100*100;
    if (thisday < startday)
        thisday += 360;
    return (thisday-startday);
   }

********************************************************************************************************

#include <iostream>

using namespace std;

class ZooAnimal
   {
    private:
      char *name;
      int cageNumber;
      int weightDate;
      int weight;
    public:
      void Create (char*, int, int, int); // create function
      void Destroy (); // destroy function
      char* reptName ();
      int daysSinceLastWeighed (int today);
   };

   // -------- member function to return the animal's name
   char* ZooAnimal::reptName ()
   {
    return name;
   }

   // ========== an application to use the ZooAnimal class
   int main ()
   {
    ZooAnimal bozo;
    bozo.Create ("Bozo", 408, 1027, 400);

    std::cout << "This animal's name is " << bozo.reptName() << std::endl;

    bozo.Destroy ();
    return 0;
   }

***********************************************************************************************

enum scale {ounces, kilograms};

class ZooAnimal
{
 private:
   char *name;
   int cageNumber;
   int weightDate;
   int weight;
 public:
   void Create (char*, int, int, int); // create function
   void Destroy (); // destroy function
   void changeWeight (int pounds);
   void changeWeightDate (int today);
   char* reptName ();
   int reptWeight ();
   void reptWeight (scale which);
   inline int reptWeightDate ();
   int daysSinceLastWeighed (int today);
};

ZooAnimal::reptWeightDate()
{
    return weightDate;
}

************************************************************************************************


enum scale {ounces, kilograms};

   class ZooAnimal
   {
    private:
      char *name;
      int cageNumber;
      int weightDate;
      int weight;
    public:
      void Create (char*, int, int, int); // create function
      void Destroy (); // destroy function
      void changeWeight (int pounds);
      inline void changeWeightDate (int today);
      char* reptName ();
      int reptWeight ();
      void reptWeight (scale which);
      int reptWeightDate ();
      int daysSinceLastWeighed (int today);
   };

   void ZooAnimal::changeWeightDate(int today)
   {
       weightDate = today;
   }

*********************************************************************************************************

enum scale {ounces, kilograms};

class ZooAnimal
 {
  private:
    char *name;
    int cageNumber;
    int weightDate;
    int weight;
    ZooAnimal *mother;
  public:
    void Create (char*, int, int, int); // create function
    void Destroy (); // destroy function
    void isMotherOf (ZooAnimal&);
    void changeWeight (int pounds);
    void changeWeightDate (int today);
    char* reptName ();
    int reptWeight ();
    void reptWeight (scale which);
    inline int reptWeightDate () {return weightDate;};
    int daysSinceLastWeighed (int today);
 };

 void ZooAnimal::isMotherOf(ZooAnimal& child)
 {
     child.mother = this;
 }

********************************************************************************************************

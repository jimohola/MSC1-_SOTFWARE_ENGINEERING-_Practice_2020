// Sort 10 integer values

#include <iostream>

using namespace std;

void sort_table(int* table)
{
	 int max = table[0];
	 int min = table[0];
	 int n = 10, index = 0;
	 int sorted_table[10] = { 0 };
	 int k = -1;

	 while (n--)
	 {
		 k++;
		 for (int i = 0; i < 10; i++)
		 {
			 if (table[i] > max)
			 {
				 max = table[i];
				 index = i;
			 }
			 if (k == 0) // important just for first enter
			 {
				if (table[i] < min)
					min = table[i];
			 }
		 }
		 table[index] = min;
		 sorted_table[k] = max;
		 max = table[0];
		 index = 0;
	 }

	 for (int i = 0; i < 10; i++)
		 cout << sorted_table[i] << " ";
}

int main()
{
	int table[10] = { 10, -5, 3, 1, 8, -10, -15, 4, 82, -94 };
	sort_table(table);
}

_____________________________________________________________________________________________

// A C++ program (using function) to sort 10 integer values
#include <cstdlib>
#include <iostream>
#include<iomanip>
#include<cmath>

using namespace std;

void mysort(int numberlist[]){

    int i,j;
    int value;

      for(i=0;i<10;i++)
     for(j=0;j<10;j++)

      if(numberlist[j]>numberlist[j+1]){

         value=numberlist[j];

         numberlist[j]=numberlist[j+1];

         numberlist[j+1]=value;
       }

       for(i=0;i<10;i++)cout<<numberlist[i]<<"\n";

}

void mysort(float numberlist[]){

    int i,j;
    float value;
      for(i=0;i<10;i++)
     for(j=0;j<10;j++)
      if(numberlist[j]>numberlist[j+1]){

         value=numberlist[j];

         numberlist[j]=numberlist[j+1];

         numberlist[j+1]=value;
       }

       for(i=0;i<10;i++)cout<<numberlist[i]<<"\n";

}
void mysort(double numberlist[]){

    int i,j;
    double value;;
      for(i=0;i<10;i++)
     for(j=0;j<10;j++)

      if(numberlist[j]>numberlist[j+1]){

         value=numberlist[j];

         numberlist[j]=numberlist[j+1];

         numberlist[j+1]=value;
       }

       for(i=0;i<10;i++)cout<<numberlist[i]<<"\n";

}

int main(int argc, char *argv[])
{
     int numberlist[]={13,7,66,32,75,98,5,67,44,23};

  mysort(numberlist);

  system("PAUSE");

  return EXIT_SUCCESS;
}
